{"componentChunkName":"component---src-templates-blog-post-js","path":"/making-sense-of-using-redux-in-react/","result":{"data":{"site":{"siteMetadata":{"title":"Yeri's Digital Note"}},"markdownRemark":{"id":"6d7fcc96-ffa4-5e72-b757-e8c90a1a8f74","excerpt":"Redux and react is a separate libraries. They don’t know each other (internally). When we store data in redux and want to use that data in react component, we…","html":"<p>Redux and react is a separate libraries. They don’t know each other (internally). When we store data in redux and want to use that data in react component, we have to somewhat “connect” them.</p>\n<p>Let’s say we have this component that use redux state</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>createStore<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span>\n<span class=\"token keyword\">import</span> reducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./reducer'</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">.</span><span class=\"token function\">getState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span> <span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// somewhere in our code, we make a state update using dispatch</span>\nstore<span class=\"token punctuation\">.</span><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token string\">'LOGIN_ACTION'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Everytime the redux state is updated after we dispatch actions, react doesn’t know how to react (pun intended) to the changes, therefore the UI is not reflecting the current state. In order for react to be aware of the changes, we need a way to notify our component when the state is updated. That’s when we need <code class=\"language-text\">react-redux</code>, another library to <code class=\"language-text\">connect</code> them. The <code class=\"language-text\">react-redux</code> library provide wrapper component, <code class=\"language-text\">&lt;Provider /&gt;</code>, where we store the redux store (another pun intended) so that we can refer to it later in child components.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>Provider<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>createStore<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'redux'</span>\n<span class=\"token keyword\">import</span> reducer <span class=\"token keyword\">from</span> <span class=\"token string\">'./reducer'</span>\n<span class=\"token keyword\">const</span> store <span class=\"token operator\">=</span> <span class=\"token function\">createStore</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">)</span>\n<span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>Provider store<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>store<span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Provider<span class=\"token operator\">></span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token comment\">// to make it simple, here's the shape of our state</span>\n<span class=\"token punctuation\">{</span> isLoggedIn<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> username<span class=\"token operator\">:</span> <span class=\"token string\">'Faye Valentine'</span> <span class=\"token punctuation\">}</span></code></pre></div>\n<p>Later, if we need to use the redux state, we will not call <code class=\"language-text\">getState()</code> manually anymore. Instead, we connect our component with redux using <code class=\"language-text\">connect()</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>connect<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react-redux'</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Welcome<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>state<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> wrapComponentWithState <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> AppWithState <span class=\"token operator\">=</span> <span class=\"token function\">wrapComponentWithState</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The <code class=\"language-text\">connect()</code> function receive a function as its first parameter. Using this function, we can tell redux which part of the state that we want to access. The return value of this function will be injected to the wrapped component as props. In the example above, we use <code class=\"language-text\">identity</code> function <code class=\"language-text\">state =&gt; state</code>, that means our wrapped component will receive our entire state as the props. But it’s up to define the shape, for example we can do this instead:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> wrapComponentWithState <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        greeting<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>isLoggedIn <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Hello, </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>state<span class=\"token punctuation\">.</span>username<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token string\">'Hello, stranger'</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// ... and in our component we're no longer gain access of entire state,</span>\n<span class=\"token comment\">// instead we only receive greeting as props</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> greeting <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span><span class=\"token punctuation\">{</span>greeting<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span></code></pre></div>\n<p>The <code class=\"language-text\">connect()</code> function returns a function, which will be used to wrap another component, so that the wrapped component can access the state as props, as we discuss above. By using this way, <code class=\"language-text\">react-redux</code> make sure that the props that is injected to the component will always in sync with the current redux state. Another thing we need to do with the redux state is a way to make a change. We can export the store instance that we pass to the <code class=\"language-text\">&lt;Provider /&gt;</code> component and import it wherever we needed and call <code class=\"language-text\">store.dispatch</code> to dispatch actions. But let’s be a good boy for a moment and follow the guide properly. The <code class=\"language-text\">connect()</code> also can receive second parameter, which is also a function. The purpose of this function is very similar to the first parameter, but instead of receiving state, it receives dispatch as parameter, so we can inject pre-baked dispatcher to our component.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapStateToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  username<span class=\"token operator\">:</span> state<span class=\"token punctuation\">.</span>username\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">mapDispatchToProps</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">dispatch</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">doLogin</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">'LOGIN_ACTION'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> wrapComponentWithState <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  mapStateToProps<span class=\"token punctuation\">,</span>\n  mapDispatchToProps\n<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ... we can then access the dispatcher in our component</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> username<span class=\"token punctuation\">,</span> doLogin <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>button onClick<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>doLogin<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>Login <span class=\"token keyword\">as</span> <span class=\"token punctuation\">{</span>username<span class=\"token punctuation\">}</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>button<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>In the example above, we call the first and second parameter as <code class=\"language-text\">mapStateToProps</code> and <code class=\"language-text\">mapDispatchToProps</code> because we “map” the redux state and dispatch to a shape which will be injected to the wrapped component as props. Another thing to note is that since <code class=\"language-text\">connect()</code> returns a function, we can immediately call the returning function and resulting a wrapped component. The <code class=\"language-text\">App</code> component is just a component that receive and display data, while <code class=\"language-text\">AppWithState</code> will contain the actual logic and actions.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> value1<span class=\"token punctuation\">,</span> value2 <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n    <span class=\"token punctuation\">{</span>value1<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">{</span>value2<span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> AppWithState <span class=\"token operator\">=</span> <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>\n  mapStateToProps<span class=\"token punctuation\">,</span>\n  mapDispatchToProps\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>App<span class=\"token punctuation\">)</span></code></pre></div>\n<p>So that’s how it is (i guess) why we use redux that way in react app.</p>","frontmatter":{"title":"Making sense of using Redux in React","date":"January 28, 2019","description":"Simple explanation of react-redux api."}}},"pageContext":{"slug":"/making-sense-of-using-redux-in-react/","previous":{"fields":{"slug":"/clearing-confusion-prettier-vs-linters/"},"frontmatter":{"title":"Clearing confusion: Prettier vs Linters"}},"next":{"fields":{"slug":"/git-intro/"},"frontmatter":{"title":"Git intro"}}}},"staticQueryHashes":["1246554614","2841359383"]}