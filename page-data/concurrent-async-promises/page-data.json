{"componentChunkName":"component---src-templates-blog-post-js","path":"/concurrent-async-promises/","result":{"data":{"site":{"siteMetadata":{"title":"Yeri's Digital Note"}},"markdownRemark":{"id":"f0068690-b8b2-54ec-9aef-dbb034dbb57d","excerpt":"In TypeScript, we can run multiple async promises concurrently using the\n and  function. With  we might lose the results if any\nof the promises reject. On theâ€¦","html":"<p>In TypeScript, we can run multiple async promises concurrently using the\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/all\"><code class=\"language-text\">Promise.all()</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled\"><code class=\"language-text\">Promise.allSettled()</code></a> function.</p>\n<p>With <code class=\"language-text\">Promise.all()</code> we might <em>lose</em> the results if any\nof the promises reject.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> ps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error for some reason'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// .. will print out \"error for some reason\"</span></code></pre></div>\n<p>On the other hand, <code class=\"language-text\">Promise.allSettled()</code> is usually a better option if we want\nto get all the results regardless of wheter promise is resolved or rejected.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> ps <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error for some reason'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n\n<span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">all</span><span class=\"token punctuation\">(</span>ps<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span>log<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [</span>\n<span class=\"token comment\">//   { status: 'fulfilled', value: 1 },</span>\n<span class=\"token comment\">//   { status: 'rejected', reason: 'some reason' },</span>\n<span class=\"token comment\">//   { status: 'fulfilled', value: 2 }</span>\n<span class=\"token comment\">// ]</span></code></pre></div>\n<p>To retrieve all the resolved promises only, we can filter the results.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> promises <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">reject</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error for some reason'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n  <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> results <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">allSettled</span><span class=\"token punctuation\">(</span>promises<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> resolvedPromises <span class=\"token operator\">=</span> results\n  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>resulve <span class=\"token operator\">=></span> result<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token string\">'fulfilled'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=></span> result<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// .. [1, 2, 4, 5]</span></code></pre></div>\n<p>However, when we have many promises, we might face high memory consumption.\nImagine we have a list of namespaces, then we want to retrieve all users for each of those namespaces.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getUserByNamespace</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">namespace</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">fetch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">namespace/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token keyword\">namespace</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/users</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// each namespace might have hundreds if not thousands of users</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> namespaces <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'namespace1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'namespace2'</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'namespace896'</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// suppose we have hundreds of namespaces</span>\n<span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">allSettled</span><span class=\"token punctuation\">(</span>namespaces<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>getUserByNamespaces<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>resulve <span class=\"token operator\">=></span> result<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token string\">'fulfilled'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=></span> result<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// .. [user1, user2, user3, ..., userN]</span></code></pre></div>\n<p>In this case, one simple solution is to divide the promises into multiple smaller ones, then process them sequentially.</p>\n<p>First, we divide the list of namespaces into chunks of namespaces.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">function</span> <span class=\"token generic-function\"><span class=\"token function\">chunkArray</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>array<span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> chunkSize<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">T</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span> length<span class=\"token operator\">:</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">ceil</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">/</span> chunkSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> array<span class=\"token punctuation\">.</span><span class=\"token function\">slice</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">*</span> chunkSize<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> chunkSize<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> namespaces <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token string\">'namespace1'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'namespace2'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'namespac3'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'namespace4'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'namespace5'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">'namespace6'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">const</span> namespaceChunks <span class=\"token operator\">=</span> <span class=\"token function\">chunkArray</span><span class=\"token punctuation\">(</span>namespaces<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// [</span>\n<span class=\"token comment\">//   ['namespace1', 'namespace2'],</span>\n<span class=\"token comment\">//   ['namespace3', 'namespace4'],</span>\n<span class=\"token comment\">//   ['namespace5', 'namespace6'],</span>\n<span class=\"token comment\">// ]</span></code></pre></div>\n<p>Then we loop the chunks and handle the promises sequentially.\nAlso, we use the <code class=\"language-text\">Map()</code> data type to store the results to avoid redundancy.</p>\n<div class=\"gatsby-highlight\" data-language=\"typescript\"><pre class=\"language-typescript\"><code class=\"language-typescript\"><span class=\"token keyword\">const</span> users <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> namespaceChunk <span class=\"token keyword\">of</span> namespaceChunks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> namespaceUsers <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token builtin\">Promise</span><span class=\"token punctuation\">.</span><span class=\"token function\">allSettled</span><span class=\"token punctuation\">(</span>\n    namespaceChunk<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>getUserByNamespace<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">)</span>\n\n  namespaceUsers<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>result <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">.</span>status <span class=\"token operator\">===</span> <span class=\"token string\">'fulfilled'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> result<span class=\"token punctuation\">.</span>value\n      users<span class=\"token punctuation\">.</span><span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span>user<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">,</span> user<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">Array</span><span class=\"token punctuation\">.</span><span class=\"token keyword\">from</span><span class=\"token punctuation\">(</span>users<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// .. [user1, user2, user3, ..., userN]</span></code></pre></div>","frontmatter":{"title":"Concurrent Async Promises","date":"December 31, 2023","description":"Efficient concurrent async promises handling in typescript"}}},"pageContext":{"slug":"/concurrent-async-promises/","previous":{"fields":{"slug":"/customizing-nvim-telescope/"},"frontmatter":{"title":"Customizing telescope.nvim"}},"next":{"fields":{"slug":"/customizing-nvim-lualine/"},"frontmatter":{"title":"Customizing nvim lualine"}}}},"staticQueryHashes":["2841359383"]}