{"componentChunkName":"component---src-templates-blog-post-js","path":"/catch-multiple-exception-in-javascript-with-union-type/","result":{"data":{"site":{"siteMetadata":{"title":"Yeri's Digital Note"}},"markdownRemark":{"id":"eb47a6f8-9e97-52c5-b65b-d82f36b45671","excerpt":"Javascript doesn’t have built-in method for catching different types of exception. But, first of all, I should mention that javascript do have some built-in…","html":"<p>Javascript doesn’t have built-in method for catching different types of exception.</p>\n<p>But, first of all, I should mention that javascript do have some <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Error_types\">built-in exception types</a>. And we can <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Handling_a_specific_error\">check for its instance type</a> to handle different case of errors. If we need custom error for our app, we can also <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Error#Custom_Error_Types\">define our own error type</a>.</p>\n<p>That being said, there is another way we can workaround this, using union type. Union type is a way to represent a type that can hold several different value at a time. Its like enum in some other language (javascript doesn’t have enum keyword), but simply better, because each type can hold additional value (or not).</p>\n<p>We will use a library called <a href=\"https://github.com/paldepind/union-type\"><code class=\"language-text\">union-type</code></a> to demonstrate this.</p>\n<p>First, we create our custom error type.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> Type <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'union-type'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> Err <span class=\"token operator\">=</span> <span class=\"token function\">Type</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  InvalidParam<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  ValidationError<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token punctuation\">,</span> Object<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  UnknownError<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>We created <code class=\"language-text\">Err</code> custom error type. It has three possible value, the error can be either <code class=\"language-text\">InvalidParam</code>, <code class=\"language-text\">ValidationError</code>, or <code class=\"language-text\">UnknownError</code>.</p>\n<p>Each one of them can hold additional value, for example the <code class=\"language-text\">InvalidParam</code> can hold one additional value of type <code class=\"language-text\">String</code>, that we can use to pass in the error message.</p>\n<p>The <code class=\"language-text\">ValidationError</code> has two values, first is of type <code class=\"language-text\">String</code> to pass in error message and the second is of type <code class=\"language-text\">Object</code> to pass in the validation error details.</p>\n<p>Let say the <code class=\"language-text\">UnknownError</code> is a generic error and doesn’t have additional info, so we pass empty array <code class=\"language-text\">[]</code>.</p>\n<p>To create one of those errors, we use the constructor function provided by <code class=\"language-text\">union-type</code> library inside the <code class=\"language-text\">Err</code> object.</p>\n<p>The name of the constructor function is the same as the error type. The function can also receive argument or not, depending whether the error type has additional value attached to it.</p>\n<p>For example we have a function for updating user profile.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">updateProfile</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">userId<span class=\"token punctuation\">,</span> payload</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">validId</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> Err<span class=\"token punctuation\">.</span><span class=\"token function\">InvalidParam</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Invalid param'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">validPayload</span><span class=\"token punctuation\">(</span>payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">throw</span> Err<span class=\"token punctuation\">.</span><span class=\"token function\">ValidationError</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Validation Error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">'Name is required'</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token string\">'Email format is invalid'</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">await</span> db<span class=\"token punctuation\">.</span><span class=\"token function\">updateProfile</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// whoops, we don't know what caused the error</span>\n    <span class=\"token keyword\">throw</span> Err<span class=\"token punctuation\">.</span><span class=\"token function\">UnknownError</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>In javascript we can throw any object to raise an exception, so we just throw our custom error. So, the <code class=\"language-text\">updateProfile</code> will either throw <code class=\"language-text\">InvalidParam</code>, <code class=\"language-text\">ValidationError</code>, <code class=\"language-text\">UnknownError</code> if any error occurs, or returns the updated profile if success.</p>\n<p>Now we need a way to act on the result of <code class=\"language-text\">updateProfile</code> accordingly. The <code class=\"language-text\">Err</code> have a method called <code class=\"language-text\">case</code>, used to kind of <code class=\"language-text\">switch..case</code> all the possible values.</p>\n<p>For example, we can use the function like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">async</span> <span class=\"token keyword\">function</span> <span class=\"token function\">routeHandler</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> userId <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>params<span class=\"token punctuation\">.</span>userId\n    <span class=\"token keyword\">const</span> payload <span class=\"token operator\">=</span> req<span class=\"token punctuation\">.</span>body\n    <span class=\"token keyword\">const</span> updated <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> <span class=\"token function\">updateProfile</span><span class=\"token punctuation\">(</span>userId<span class=\"token punctuation\">,</span> payload<span class=\"token punctuation\">)</span>\n\n    res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span>updated<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// handle different errors appropriately</span>\n    Err<span class=\"token punctuation\">.</span><span class=\"token function\">case</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">InvalidParam</span><span class=\"token operator\">:</span> <span class=\"token parameter\">message</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">400</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">ValidationError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">message<span class=\"token punctuation\">,</span> errors</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n        res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">422</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>message<span class=\"token punctuation\">,</span> errors<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">UnknownError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">status</span><span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">json</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>message<span class=\"token operator\">:</span> <span class=\"token string\">'Unknown Error'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Nice and clean!</p>\n<p>Also, be sure to check out the documentation of <a href=\"https://github.com/paldepind/union-type\"><code class=\"language-text\">union-type</code></a> for more info.</p>","frontmatter":{"title":"Catch multiple exception in javascript with union type","date":"June 15, 2019","description":"Here you will learn to simulate multiple exception type handling using functional programming concept."}}},"pageContext":{"slug":"/catch-multiple-exception-in-javascript-with-union-type/","previous":{"fields":{"slug":"/git-intro/"},"frontmatter":{"title":"Git intro"}},"next":{"fields":{"slug":"/disabling-syntax-highlight-but-not-really/"},"frontmatter":{"title":"Disabling syntax highlight, but not really"}}}},"staticQueryHashes":["1246554614","2841359383"]}