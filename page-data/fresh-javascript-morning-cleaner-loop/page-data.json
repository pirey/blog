{"componentChunkName":"component---src-templates-blog-post-js","path":"/fresh-javascript-morning-cleaner-loop/","result":{"data":{"site":{"siteMetadata":{"title":"Yeri's Digital Note"}},"markdownRemark":{"id":"52a178cf-a938-5d0c-9a62-87492f354103","excerpt":"List transformation Suppose we have this list of people: Now we want to extract only the names of those people. With imperative  loop: We can think the process…","html":"<h2>List transformation</h2>\n<p>Suppose we have this list of people:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> people <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'Jotaro Kujo'</span><span class=\"token punctuation\">,</span>\n        stand<span class=\"token operator\">:</span> <span class=\"token string\">'Star Platinum'</span><span class=\"token punctuation\">,</span>\n        age<span class=\"token operator\">:</span> <span class=\"token number\">17</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'Kakyoin Noriaki'</span><span class=\"token punctuation\">,</span>\n        stand<span class=\"token operator\">:</span> <span class=\"token string\">'Hierophant'</span><span class=\"token punctuation\">,</span>\n        age<span class=\"token operator\">:</span> <span class=\"token number\">17</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'Joseph Joestar'</span><span class=\"token punctuation\">,</span>\n        stand<span class=\"token operator\">:</span> <span class=\"token string\">'Hermit Purple'</span><span class=\"token punctuation\">,</span>\n        age<span class=\"token operator\">:</span> <span class=\"token number\">69</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'Muhammad Avdol'</span><span class=\"token punctuation\">,</span>\n        stand<span class=\"token operator\">:</span> <span class=\"token string\">'Magician Red'</span><span class=\"token punctuation\">,</span>\n        age<span class=\"token operator\">:</span> <span class=\"token number\">30</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">'Jean Pierre Polnareff'</span><span class=\"token punctuation\">,</span>\n        stand<span class=\"token operator\">:</span> <span class=\"token string\">'Silver Chariot'</span><span class=\"token punctuation\">,</span>\n        age<span class=\"token operator\">:</span> <span class=\"token number\">22</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Now we want to extract only the names of those people.</p>\n<p>With imperative <code class=\"language-text\">for</code> loop:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> people<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    names<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ['Jotaro Kujo', 'Kakyoin Noriaki', 'Joseph Joestar', 'Muhammad Avdol', 'Jean Pierre Polnareff']</span></code></pre></div>\n<p>We can think the process of <em>extracting</em> the names as transforming a list of people into a list of names.</p>\n<p>In the example above, our intention is only to get the names of each person, that is the line where we <code class=\"language-text\">.push()</code> each person’s name into the <code class=\"language-text\">names</code> variable. Instead we ended up expressed several unrelated things in the loop operation.</p>\n<p>We can use more clean way to express our intent, using <code class=\"language-text\">.forEach()</code> method of an array.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\npeople<span class=\"token punctuation\">.</span><span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    names<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ['Jotaro Kujo', 'Kakyoin Noriaki', 'Joseph Joestar', 'Muhammad Avdol', 'Jean Pierre Polnareff']</span></code></pre></div>\n<p>This is better than using <code class=\"language-text\">for</code> loop, because we only express the operation that we care, <code class=\"language-text\">names.push(person.name)</code>.</p>\n<p>However, this method have drawback, the function inside <code class=\"language-text\">forEach</code> is tied to the <code class=\"language-text\">names</code> variable.</p>\n<p>Instead, we can have data transformation as a single operation, using <code class=\"language-text\">.map()</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> names <span class=\"token operator\">=</span> people<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span>name\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ['Jotaro Kujo', 'Kakyoin Noriaki', 'Joseph Joestar', 'Muhammad Avdol', 'Jean Pierre Polnareff']</span></code></pre></div>\n<p>We can go further by extracting the callback into a separate function:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span>name\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> names <span class=\"token operator\">=</span> people<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>getName<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ['Jotaro Kujo', 'Kakyoin Noriaki', 'Joseph Joestar', 'Muhammad Avdol', 'Jean Pierre Polnareff']</span></code></pre></div>\n<p>Now we have even cleaner way to express our intent, to transform list of people into list of people’s names. With idea of data transformation, working with list will be simpler.</p>\n<h2>List filtering</h2>\n<p>Suppose we want to make a new list of people with age under 30.</p>\n<p>With <code class=\"language-text\">for</code> loop:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> youngsters <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> people<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;</span> <span class=\"token number\">30</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        youngsters<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can also use <code class=\"language-text\">.filter()</code> method for that:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">under30</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span>age <span class=\"token operator\">&lt;</span> <span class=\"token number\">30</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> youngsters <span class=\"token operator\">=</span> people<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span>under30<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>getName<span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>youngsters<span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// ['Jotaro Kujo', 'Kakyoin Noriaki', 'Jean Pierre Polnareff']</span></code></pre></div>\n<h2>Finding item</h2>\n<p>Using list of people in the previous section, suppose we want to find a person in the list by their name.</p>\n<p>With <code class=\"language-text\">for</code> loop, we can see that the operation is burreid inside the loop. We can define additional function to wrap the operation to find a person by their name, to make it reusable.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span> people</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> people<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>people<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">=</span> people<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">break</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> jotaro <span class=\"token operator\">=</span> <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jotaro Kujo'</span><span class=\"token punctuation\">,</span> people<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>jotaro<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Jotaro Kujo</span>\n\n<span class=\"token keyword\">const</span> notFound <span class=\"token operator\">=</span> <span class=\"token function\">findByName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Not Found'</span><span class=\"token punctuation\">,</span> people<span class=\"token punctuation\">)</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>notFound<span class=\"token punctuation\">)</span> <span class=\"token comment\">// null</span></code></pre></div>\n<p>In the above function, our primary intention is to compare each person’s name with the given name, but we ended up declaring mostly unrelated stuff.</p>\n<p>We can use <code class=\"language-text\">.find()</code> method instead:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> jotaro <span class=\"token operator\">=</span> people<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// if this person's name equals 'Jotaro Kujo' then this person is who we're looking for</span>\n    <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'Jotaro Kujo'</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>jotaro<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Jotaro Kujo</span></code></pre></div>\n<p>The <code class=\"language-text\">.find()</code> method takes a function that returns a <code class=\"language-text\">boolean</code> indicating if the item match what we want to find.</p>\n<p>We can make our function reusable by make it a separate function:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">hasName</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span>name <span class=\"token operator\">===</span> name\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We can use the function like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> jotaro <span class=\"token operator\">=</span> people<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token function\">hasName</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Jotaro Kujo'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>jotaro<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token comment\">// Jotaro Kujo</span></code></pre></div>\n<p>This is definitely more expressive than previous example that use <code class=\"language-text\">for</code> loop, and we can clearly see what is the intention of the program.</p>\n<h2>Notes</h2>\n<p>The <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">.map()</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">.filter()</a>, and <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find\">.find()</a> are all native method of <code class=\"language-text\">Array</code> in javascript.</p>","frontmatter":{"title":"Fresh javascript morning - cleaner loop","date":"July 09, 2019","description":"Learn to manipulate list in javascript using functional programming concept."}}},"pageContext":{"slug":"/fresh-javascript-morning-cleaner-loop/","previous":{"fields":{"slug":"/ajaro-coding-day/"},"frontmatter":{"title":"Ajaro Coding Day"}},"next":{"fields":{"slug":"/sysvinit-systemd/"},"frontmatter":{"title":"SysV Init - SystemD"}}}},"staticQueryHashes":["1246554614","2841359383"]}